---
AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
# CloudFormation template in YAML to setup an automated process to update revisions to datasets in AWS Data Exchange
Parameters:
  RearcDataPlatformRoleArn:
    Type: String
    Description: The Cross Account IAM Role ARN to Access the Manifest Bucket in Rearc Data Platform's control plane account.
  RearcDataPlatformExternalId:
    Type: String
    Description: The Cross Account External ID to Access the Manifest Bucket in Rearc Data Platform's control plane account.
  AssetBucket:
    Type: String
    Default: rearc-data-provider
    Description: The S3 Bucket name where this dataset resides.
  ManifestBucket:
    Type: String
    Description: The Manifest S3 Bucket name where the manifest file will be uploaded.
  CustomerId:
    Type: String
    Default: rearc
    Description: This is the customer Id in Rearc Data Platform and will be used as prefix in manifest bucket.
  DataSetName:
    Type: String
    Description: Name of the dataset
  DataSetArn:
    Type: String
    Description: ARN for the AWS Data Exchange dataset that needs to be updated
  ProductId:
    Type: String
    Description: ID of the AWS Data Exchange product that needs to be updated
  Region:
    Type: String
    Default: us-east-1
    Description: AWS Region for AWS Data Exchange
  ScheduleCron:
    Type: String
    Description: Cron Expression for the Lambda Run Schedule
Mappings:
  Resources:
    FailureSNSTopic: 
      Arn: arn:aws:sns:us-east-1:796406704065:adx-lambda-error
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: AssumeRearcDataPlatformRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Resource: !Sub '${RearcDataPlatformRoleArn}'
            - Effect: Allow
              Action: sns:Publish
              Resource: !FindInMap [Resources, FailureSNSTopic, Arn]

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        !Join
          - ''
          - - 'source-for-'
            - !Ref DataSetName
      Description: "Source revision updates to AWS Data Exchange data set"
      Runtime: "python3.7"
      Code:
        S3Bucket: !Sub ${AssetBucket}
        S3Key:
          !Join
            - ''
            - - !Sub ${DataSetName}
              - '/automation/pre-processing-code.zip'
      Handler: "lambda_function.lambda_handler"
      MemorySize: 2048
      Timeout: 900
      Role: !GetAtt [ LambdaRole, Arn ]
      Environment:
        Variables:
          RDP_ROLE_ARN: !Sub ${RearcDataPlatformRoleArn}
          RDP_EXTERNAL_ID: !Sub ${RearcDataPlatformExternalId}
          ASSET_BUCKET: !Sub ${AssetBucket}
          MANIFEST_BUCKET: !Sub ${ManifestBucket}
          CUSTOMER_ID: !Sub ${CustomerId}
          DATASET_NAME: !Sub ${DataSetName}
          DATASET_ARN: !Sub ${DataSetArn}
          PRODUCT_ID: !Sub ${ProductId}
          REGION: !Sub ${Region}
#      Layers:
#        - Ref: PyRearcADXLayer
      Layers: ["arn:aws:lambda:us-east-1:796406704065:layer:rearc-data-utils:31"]

#  PyRearcADXLayer:
#    Type: AWS::Lambda::LayerVersion
#    Properties:
#      CompatibleRuntimes:
#        - python3.8
#      Content:
#        S3Bucket: !Sub "${AssetBucket}"
#        S3Key:
#         !Join
#           - ''
#            - - !Sub ${DataSetName}
#             - '/automation/python-layer.zip'
#      Description: PyRearcADXLayer Lambda Layer for Python3.8

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Sub ${ScheduleCron}
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt [ LambdaFunction, Arn ]
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt [ ScheduledRule, Arn ]

  version:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref "LambdaFunction"

  asyncconfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      DestinationConfig:
          OnFailure:
            Destination: arn:aws:sns:us-east-1:796406704065:adx-lambda-error
      FunctionName: !Ref "LambdaFunction"
      MaximumEventAgeInSeconds: 300
      MaximumRetryAttempts: 2
      Qualifier: $LATEST

Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value: !GetAtt [ LambdaRole, Arn ]
  LambdaFunctionName:
    Value: !Ref "LambdaFunction"